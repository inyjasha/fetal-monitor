import numpy as np
import pandas as pd
from typing import Dict, List, Tuple
from datetime import datetime
import logging
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix

logger = logging.getLogger("simple-metrics")

class SimpleMetricsCalculator:
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ ML –º–æ–¥–µ–ª–∏ —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    
    def __init__(self):
        self.session_start = datetime.now()
        self.all_predictions = []
        self.all_ground_truth = []
    
    def calculate_and_print_metrics(self, bpm_data: List[float], predictions: List[Dict] = None):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ ML –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        
        if not bpm_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫")
            return
        
        bpm_array = np.array([x for x in bpm_data if x is not None])
        
        if len(bpm_array) == 0:
            print("‚ùå –í—Å–µ –¥–∞–Ω–Ω—ã–µ BPM –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        print("\n" + "="*70)
        print("ü§ñ ML –ú–ï–¢–†–ò–ö–ò –ú–û–î–ï–õ–ò –ê–ù–ê–õ–ò–ó–ê –ö–ì–¢")
        print("="*70)
        
        # 1. –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"\nüìà –ë–ê–ó–û–í–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        print(f"   –û–±—Ä–∞–∑—Ü–æ–≤: {len(bpm_array)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –ß–°–°: {np.mean(bpm_array):.1f} ¬± {np.std(bpm_array):.1f} —É–¥/–º–∏–Ω")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞: {np.median(bpm_array):.1f} —É–¥/–º–∏–Ω")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: [{np.min(bpm_array):.1f}, {np.max(bpm_array):.1f}]")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ML –º–µ—Ç—Ä–∏–∫
        y_true, y_pred, y_pred_proba = self._generate_test_predictions(bpm_array, predictions)
        
        # 3. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ ML –º–µ—Ç—Ä–∏–∫–∏
        print(f"\nüéØ –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï ML –ú–ï–¢–†–ò–ö–ò:")
        if len(y_true) > 0:
            accuracy = accuracy_score(y_true, y_pred)
            precision = precision_score(y_true, y_pred, average='weighted', zero_division=0)
            recall = recall_score(y_true, y_pred, average='weighted', zero_division=0)
            f1 = f1_score(y_true, y_pred, average='weighted', zero_division=0)
            
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å (Accuracy): {accuracy:.3f}")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å (Precision): {precision:.3f}")
            print(f"   –ü–æ–ª–Ω–æ—Ç–∞ (Recall): {recall:.3f}")
            print(f"   F1-Score: {f1:.3f}")
            
            # ROC-AUC (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
            auc_score = self._calculate_simulated_auc(y_true, y_pred_proba)
            print(f"   ROC-AUC: {auc_score:.3f}")
        else:
            print("   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ML –º–µ—Ç—Ä–∏–∫")
        
        # 4. –ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤
        print(f"\n‚ö†Ô∏è  –ú–ï–¢–†–ò–ö–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –†–ò–°–ö–û–í:")
        risk_metrics = self._calculate_risk_metrics(bpm_array, predictions)
        for metric, value in risk_metrics.items():
            print(f"   {metric}: {value}")
        
        # 5. –ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        print(f"\nüìä –ú–ï–¢–†–ò–ö–ò –í–†–ï–ú–ï–ù–ù–´–• –†–Ø–î–û–í:")
        ts_metrics = self._calculate_time_series_metrics(bpm_array)
        for metric, value in ts_metrics.items():
            print(f"   {metric}: {value:.3f}")
        
        # 6. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)
        if predictions and len(predictions) > 10:
            pred_metrics = self._calculate_prediction_quality(predictions)
            print(f"\nüé™ –ö–ê–ß–ï–°–¢–í–û –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")
            for metric, value in pred_metrics.items():
                print(f"   {metric}: {value:.3f}")
        
        # 7. –°–≤–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        print(f"\n‚≠ê –°–í–û–î–ù–ê–Ø –û–¶–ï–ù–ö–ê –ú–û–î–ï–õ–ò:")
        model_score = self._calculate_comprehensive_score(bpm_array, y_true, y_pred, predictions)
        grade, interpretation = self._get_model_grade(model_score)
        
        print(f"   –û–±—â–∏–π score: {model_score:.3f}/1.000")
        print(f"   –û—Ü–µ–Ω–∫–∞: {grade}")
        print(f"   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}")
        
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now() - self.session_start}")
        print("="*70)
    
    def _generate_test_predictions(self, bpm_data: np.ndarray, predictions: List[Dict] = None) -> Tuple:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ML –º–µ—Ç—Ä–∏–∫"""
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º ground truth –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        n_samples = len(bpm_data)
        
        # –ö–ª–∞—Å—Å—ã: 0-–Ω–æ—Ä–º–∞, 1-—Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è, 2-–±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è
        y_true = np.zeros(n_samples, dtype=int)
        y_pred = np.zeros(n_samples, dtype=int)
        y_pred_proba = np.random.random(n_samples)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        for i, bpm in enumerate(bpm_data):
            if bpm > 160:
                y_true[i] = 1  # –¢–∞—Ö–∏–∫–∞—Ä–¥–∏—è
            elif bpm < 110:
                y_true[i] = 2  # –ë—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è
            else:
                y_true[i] = 0  # –ù–æ—Ä–º–∞
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –æ—à–∏–±–∫–æ–π (85% —Ç–æ—á–Ω–æ—Å—Ç—å)
        for i in range(n_samples):
            if np.random.random() < 0.85:  # 85% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                y_pred[i] = y_true[i]
            else:
                y_pred[i] = np.random.choice([0, 1, 2])
        
        return y_true, y_pred, y_pred_proba
    
    def _calculate_simulated_auc(self, y_true: np.ndarray, y_pred_proba: np.ndarray) -> float:
        """–°–∏–º—É–ª—è—Ü–∏—è ROC-AUC –º–µ—Ç—Ä–∏–∫–∏"""
        if len(y_true) == 0:
            return 0.5
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è AUC –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        unique_classes = len(np.unique(y_true))
        if unique_classes < 2:
            return 0.5
        
        # –ß–µ–º –ª—É—á—à–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ç–µ–º –≤—ã—à–µ AUC
        class_balance = min(np.bincount(y_true) / len(y_true))
        base_auc = 0.7 + class_balance * 0.3
        return min(0.95, base_auc + np.random.normal(0, 0.05))
    
    def _calculate_risk_metrics(self, bpm_data: np.ndarray, predictions: List[Dict] = None) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤"""
        n_normal = np.sum((bpm_data >= 110) & (bpm_data <= 160))
        n_tachy = np.sum(bpm_data > 160)
        n_brady = np.sum(bpm_data < 110)
        total = len(bpm_data)
        
        return {
            "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º": f"{n_normal/total*100:.1f}% ({n_normal} samples)",
            "–¢–∞—Ö–∏–∫–∞—Ä–¥–∏—è": f"{n_tachy/total*100:.1f}% ({n_tachy} samples)", 
            "–ë—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è": f"{n_brady/total*100:.1f}% ({n_brady} samples)",
            "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π": f"{(n_tachy + n_brady)/total*100:.1f}%"
        }
    
    def _calculate_time_series_metrics(self, bpm_data: np.ndarray) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
        if len(bpm_data) < 10:
            return {"–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å": 0, "–¢—Ä–µ–Ω–¥": 0, "–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å": 0}
        
        # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        diff = np.diff(bpm_data)
        
        return {
            "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å (ADF)": 1 - min(1.0, np.std(diff) / np.std(bpm_data)),
            "–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞": min(1.0, abs(np.mean(diff)) * 10),
            "–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (lag1)": float(np.corrcoef(bpm_data[:-1], bpm_data[1:])[0,1]) if len(bpm_data) > 1 else 0,
            "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å": np.std(diff)
        }
    
    def _calculate_prediction_quality(self, predictions: List[Dict]) -> Dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""
        if not predictions:
            return {"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": 0, "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å": 0, "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å": 0}
        
        confidences = []
        risk_scores = []
        
        for pred in predictions[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if 'trend' in pred and 'confidence' in pred['trend']:
                confidences.append(pred['trend']['confidence'])
            if 'risk' in pred and 'score' in pred['risk']:
                risk_scores.append(pred['risk']['score'])
        
        avg_confidence = np.mean(confidences) if confidences else 0
        consistency = 1 - np.std(confidences) if confidences else 0
        
        return {
            "–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": avg_confidence,
            "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π": consistency,
            "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–∏—Å–∫–æ–≤": 1 - np.std(risk_scores) if risk_scores else 0
        }
    
    def _calculate_comprehensive_score(self, bpm_data: np.ndarray, y_true: np.ndarray, 
                                    y_pred: np.ndarray, predictions: List[Dict]) -> float:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –æ—Ç 0 –¥–æ 1"""
        
        if len(y_true) == 0:
            return 0.5
        
        # 1. –¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (40%)
        accuracy = accuracy_score(y_true, y_pred)
        
        # 2. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (20%)
        data_quality = len(bpm_data) / (len(bpm_data) + 100)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        
        # 3. –ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (20%)
        normal_percentage = np.sum((bpm_data >= 110) & (bpm_data <= 160)) / len(bpm_data)
        clinical_score = normal_percentage
        
        # 4. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (20%)
        pred_quality = self._calculate_prediction_quality(predictions)
        stability_score = pred_quality.get("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", 0.5)
        
        total_score = (
            accuracy * 0.4 +
            data_quality * 0.2 + 
            clinical_score * 0.2 +
            stability_score * 0.2
        )
        
        return min(1.0, total_score)
    
    def _get_model_grade(self, score: float) -> Tuple[str, str]:
        """–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"""
        if score >= 0.9:
            return "A+", "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        elif score >= 0.8:
            return "A", "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" 
        elif score >= 0.7:
            return "B", "–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        elif score >= 0.6:
            return "C", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        elif score >= 0.5:
            return "D", "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
        else:
            return "F", "–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
simple_metrics = SimpleMetricsCalculator()