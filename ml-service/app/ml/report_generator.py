# app/ml/report_generator.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–µ—Å—Å–∏—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
"""

import os
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import cm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

class PDFReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–æ–¥–∞"""
    
    def __init__(self, output_dir: str = "reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.fonts_registered = False
        self._register_fonts()
    
    def _register_fonts(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —à—Ä–∏—Ñ—Ç–∞–º (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
            font_paths = [
                # 1. –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ fonts –≤ –ø—Ä–æ–µ–∫—Ç–µ
                ("DejaVuSans", "fonts/DejaVuSans.ttf"),
                ("DejaVuSans-Bold", "fonts/DejaVuSans-Bold.ttf"),
                
                # 2. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ DejaVu
                ("DejaVuSans", "C:/Projects/fetal-monitor/ml-service/fonts/DejaVuSans.ttf"),
                ("DejaVuSans-Bold", "C:/Projects/fetal-monitor/ml-service/fonts/DejaVuSans-Bold.ttf"),
                
                # 3. –®—Ä–∏—Ñ—Ç—ã Liberation
                ("LiberationSans", "fonts/LiberationSans-Regular.ttf"),
                ("LiberationSans-Bold", "fonts/LiberationSans-Bold.ttf"),
                
                # 4. –°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Windows
                ("Arial", "C:/Windows/Fonts/arial.ttf"),
                ("Arial-Bold", "C:/Windows/Fonts/arialbd.ttf"),
                
                # 5. –°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Linux
                ("DejaVuSans", "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"),
                ("DejaVuSans-Bold", "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"),
            ]
            
            registered_fonts = []
            
            for font_name, font_path in font_paths:
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont(font_name, font_path))
                        registered_fonts.append(font_name)
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_name} –∏–∑ {font_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç {font_path}: {e}")
                        continue
            
            if registered_fonts:
                self.fonts_registered = True
                print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —à—Ä–∏—Ñ—Ç—ã: {', '.join(registered_fonts)}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                if 'DejaVuSans' in registered_fonts and 'DejaVuSans-Bold' in registered_fonts:
                    self.normal_font = 'DejaVuSans'
                    self.bold_font = 'DejaVuSans-Bold'
                elif 'Arial' in registered_fonts and 'Arial-Bold' in registered_fonts:
                    self.normal_font = 'Arial'
                    self.bold_font = 'Arial-Bold'
                elif 'LiberationSans' in registered_fonts and 'LiberationSans-Bold' in registered_fonts:
                    self.normal_font = 'LiberationSans'
                    self.bold_font = 'LiberationSans-Bold'
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
                    self.normal_font = registered_fonts[0]
                    self.bold_font = registered_fonts[0]
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
                self.normal_font = 'Helvetica'
                self.bold_font = 'Helvetica-Bold'
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            self.normal_font = 'Helvetica'
            self.bold_font = 'Helvetica-Bold'
            self.fonts_registered = False

    def _create_russian_styles(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        styles = getSampleStyleSheet()
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_style = ParagraphStyle(
            'RussianTitle',
            parent=styles['Heading1'],
            fontName=self.bold_font,
            fontSize=16,
            spaceAfter=30,
            textColor=colors.darkblue,
            alignment=1  # CENTER
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        heading_style = ParagraphStyle(
            'RussianHeading',
            parent=styles['Heading2'],
            fontName=self.bold_font,
            fontSize=12,
            spaceAfter=12,
            textColor=colors.darkblue
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        normal_style = ParagraphStyle(
            'RussianNormal',
            parent=styles['Normal'],
            fontName=self.normal_font,
            fontSize=10,
            spaceAfter=6
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü
        table_style = ParagraphStyle(
            'RussianTable',
            parent=styles['Normal'],
            fontName=self.normal_font,
            fontSize=9
        )
        
        return {
            'title': title_style,
            'heading': heading_style,
            'normal': normal_style,
            'table': table_style
        }
    
    def _safe_text(self, text: Any) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫—É"""
        if text is None:
            return "‚Äî"
        return str(text)
    
    def generate_session_report(self, session_data: Dict[str, Any], 
                              analysis_data: Dict[str, Any],
                              patient_info: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –ø–æ —Å–µ—Å—Å–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            session_id = session_data.get('session_id', 'unknown')
            filename = f"session_report_{session_id}_{timestamp}.pdf"
            filepath = self.output_dir / filename
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}...")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç—ã: normal={self.normal_font}, bold={self.bold_font}")
            
            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            doc = SimpleDocTemplate(
                str(filepath), 
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=72
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏
            styles = self._create_russian_styles()
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            story = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("–û–¢–ß–ï–¢ –ü–û –°–ï–°–°–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–õ–û–î–ê", styles['title']))
            story.append(Spacer(1, 20))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
            story.append(Paragraph("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–°–°–ò–ò", styles['heading']))
            session_info_data = [
                ["ID —Å–µ—Å—Å–∏–∏:", self._safe_text(session_data.get('session_id'))],
                ["–ì—Ä—É–ø–ø–∞:", self._safe_text(session_data.get('group'))],
                ["–ü–∞–ø–∫–∞:", self._safe_text(session_data.get('folder_id'))],
                ["–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", datetime.now().strftime("%d.%m.%Y %H:%M")],
                ["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:", f"{analysis_data.get('features', {}).get('duration_seconds', 0):.1f} —Å–µ–∫"],
                ["–í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö:", str(analysis_data.get('features', {}).get('total_samples', 0))]
            ]
            
            session_table = Table(session_info_data, colWidths=[5*cm, 9*cm])
            session_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#2E86AB")),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), self.normal_font),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#F0F8FF")),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(session_table)
            story.append(Spacer(1, 20))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–∫–µ
            story.append(Paragraph("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–¶–ò–ï–ù–¢–ö–ï", styles['heading']))
            patient_data = [
                ["–í–æ–∑—Ä–∞—Å—Ç:", f"{self._safe_text(patient_info.get('age'))} –ª–µ—Ç"],
                ["–°—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏:", f"{self._safe_text(patient_info.get('gestation_weeks'))} –Ω–µ–¥–µ–ª—å"],
                ["pH –∫—Ä–æ–≤–∏:", self._safe_text(patient_info.get('Ph'))],
                ["–ì–ª—é–∫–æ–∑–∞:", f"{self._safe_text(patient_info.get('Glu'))} mmol/L"],
                ["–õ–∞–∫—Ç–∞—Ç:", f"{self._safe_text(patient_info.get('LAC'))} mmol/L"],
                ["BE:", self._safe_text(patient_info.get('BE'))]
            ]
            
            patient_table = Table(patient_data, colWidths=[5*cm, 9*cm])
            patient_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#A23B72")),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), self.normal_font),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#F8F0FF")),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(patient_table)
            
            # –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
            risk_factors = patient_info.get('risk_factors', {})
            active_risks = [factor for factor, active in risk_factors.items() if active]
            if active_risks:
                story.append(Spacer(1, 10))
                story.append(Paragraph("–§–ê–ö–¢–û–†–´ –†–ò–°–ö–ê:", styles['heading']))
                risks_text = ", ".join(active_risks)
                story.append(Paragraph(risks_text, styles['normal']))
            
            story.append(Spacer(1, 20))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BPM
            story.append(Paragraph("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–î–ï–ß–ù–û–ì–û –†–ò–¢–ú–ê –ü–õ–û–î–ê", styles['heading']))
            features = analysis_data.get('features', {})
            bpm_stats = [
                ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"],
                ["–°—Ä–µ–¥–Ω–∏–π BPM", f"{features.get('mean_bpm', 0):.1f}"],
                ["–ú–µ–¥–∏–∞–Ω–Ω—ã–π BPM", f"{features.get('median_bpm', 0):.1f}"],
                ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π BPM", f"{features.get('max_bpm', 0):.1f}"],
                ["–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π BPM", f"{features.get('min_bpm', 0):.1f}"],
                ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{features.get('std_bpm', 0):.1f}"],
                ["–í—Å–µ–≥–æ —Ç–æ—á–µ–∫ BPM", str(features.get('bpm_samples', 0))]
            ]
            
            stats_table = Table(bpm_stats, colWidths=[6*cm, 8*cm])
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#18A999")),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, -1), self.normal_font),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#F0FFF8")),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(stats_table)
            story.append(Spacer(1, 20))
            
            # –°–æ–±—ã—Ç–∏—è
            story.append(Paragraph("–°–û–ë–´–¢–ò–Ø –ò –ê–ù–û–ú–ê–õ–ò–ò", styles['heading']))
            events_data = [
                ["–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                ["–î–µ—Ü–µ–ª–µ—Ä–∞—Ü–∏–∏", str(features.get('decel_count', 0))],
                ["–≠–ø–∏–∑–æ–¥—ã —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏–∏", str(features.get('tachy_count', 0))],
                ["–≠–ø–∏–∑–æ–¥—ã –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏–∏", str(features.get('brady_count', 0))]
            ]
            
            events_table = Table(events_data, colWidths=[6*cm, 8*cm])
            events_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#F24236")),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, -1), self.normal_font),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#FFF0F0")),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(events_table)
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            story.append(Spacer(1, 20))
            story.append(Paragraph("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï", styles['heading']))
            
            conclusion = self._generate_conclusion(features, patient_info)
            story.append(Paragraph(conclusion, styles['normal']))
            
            # –ü–æ–¥–ø–∏—Å—å
            story.append(Spacer(1, 30))
            story.append(Paragraph("–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–æ–¥–∞", 
                                 ParagraphStyle('Footer', parent=styles['normal'], fontSize=8, textColor=colors.gray)))
            
            # –°–æ–±–∏—Ä–∞–µ–º PDF
            print("üìÑ –°–æ–±–∏—Ä–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç...")
            doc.build(story)
            print(f"‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
            
            return str(filepath)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π PDF
            return self._generate_fallback_pdf(session_data, analysis_data, patient_info)
    
    def _generate_fallback_pdf(self, session_data: Dict, analysis_data: Dict, patient_info: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π PDF –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        from reportlab.pdfgen import canvas
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        session_id = session_data.get('session_id', 'unknown')
        filename = f"session_report_{session_id}_{timestamp}_fallback.pdf"
        filepath = self.output_dir / filename
        
        print("üîÑ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π PDF –æ—Ç—á–µ—Ç...")
        
        c = canvas.Canvas(str(filepath), pagesize=A4)
        width, height = A4
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        c.setFont("Helvetica-Bold", 16)
        c.drawString(100, height - 100, "FETAL MONITORING REPORT")
        c.setFont("Helvetica", 10)
        
        y_position = height - 140
        
        # Session Information
        c.setFont("Helvetica-Bold", 12)
        c.drawString(100, y_position, "SESSION INFORMATION:")
        y_position -= 20
        c.setFont("Helvetica", 10)
        
        session_info = [
            f"Session ID: {session_data.get('session_id', '‚Äî')}",
            f"Group: {session_data.get('group', '‚Äî')}",
            f"Folder: {session_data.get('folder_id', '‚Äî')}",
            f"Date: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            f"Duration: {analysis_data.get('features', {}).get('duration_seconds', 0):.1f} sec",
            f"Samples: {analysis_data.get('features', {}).get('total_samples', 0)}"
        ]
        
        for line in session_info:
            c.drawString(120, y_position, line)
            y_position -= 15
        
        y_position -= 10
        
        # Patient Information
        c.setFont("Helvetica-Bold", 12)
        c.drawString(100, y_position, "PATIENT INFORMATION:")
        y_position -= 20
        c.setFont("Helvetica", 10)
        
        patient_data = [
            f"Age: {patient_info.get('age', '‚Äî')} years",
            f"Gestation: {patient_info.get('gestation_weeks', '‚Äî')} weeks",
            f"Blood pH: {patient_info.get('Ph', '‚Äî')}",
            f"Glucose: {patient_info.get('Glu', '‚Äî')} mmol/L",
            f"Lactate: {patient_info.get('LAC', '‚Äî')} mmol/L",
            f"BE: {patient_info.get('BE', '‚Äî')}"
        ]
        
        for line in patient_data:
            c.drawString(120, y_position, line)
            y_position -= 15
        
        c.save()
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filepath}")
        return str(filepath)
    
    def _generate_conclusion(self, features: Dict[str, Any], patient_info: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        conclusions = []
        
        # –ê–Ω–∞–ª–∏–∑ BPM
        mean_bpm = features.get('mean_bpm')
        if mean_bpm:
            if mean_bpm > 160:
                conclusions.append("–û—Ç–º–µ—á–∞–µ—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–∞—è —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è.")
            elif mean_bpm < 110:
                conclusions.append("–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è.")
            else:
                conclusions.append("–ë–∞–∑–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        std_bpm = features.get('std_bpm')
        if std_bpm:
            if std_bpm < 5:
                conclusions.append("–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ —Å–Ω–∏–∂–µ–Ω–∞.")
            elif std_bpm > 15:
                conclusions.append("–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ –ø–æ–≤—ã—à–µ–Ω–∞.")
            else:
                conclusions.append("–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ –≤ –Ω–æ—Ä–º–µ.")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π
        if features.get('decel_count', 0) > 0:
            conclusions.append("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–µ—Ü–µ–ª–µ—Ä–∞—Ü–∏–∏.")
        
        if features.get('tachy_count', 0) > 5:
            conclusions.append("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏–∏.")
        
        if features.get('brady_count', 0) > 0:
            conclusions.append("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —ç–ø–∏–∑–æ–¥—ã –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏–∏.")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
        risk_factors = patient_info.get('risk_factors', {})
        active_risks = [factor for factor, active in risk_factors.items() if active]
        if active_risks:
            conclusions.append(f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: {', '.join(active_risks)}.")
        
        if not conclusions:
            conclusions.append("–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. –ö–∞—Ä–¥–∏–æ—Ç–æ–∫–æ–≥—Ä–∞–º–º–∞ –≤ –Ω–æ—Ä–º–µ.")
        
        return " ".join(conclusions)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
report_generator = PDFReportGenerator()