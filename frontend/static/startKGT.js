// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let monitoringInterval;
let dataInterval;
let monitoringTime = 0;
let isMonitoring = false;
let websocket = null;

let currentSessionId = null;
let currentSessionType = null;

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
let heartRateData = [];
let contractionsData = [];
const maxDataPoints = 1000;

// –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ö–ì–¢
let isKGTLoaded = false;
let loadedKGTData = null;
let kgtPlaybackInterval = null;
let currentPlaybackIndex = 0;
let isPlaybackPaused = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
let currentTrend = null;
let currentRisk = null;
let currentStats = null;

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
let sessionDataForReport = {
    heartRate: [],
    contractions: [],
    timestamps: [],
    startTime: null,
    endTime: null,
    duration: 0,
    meta: null
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ canvas
const heartRateCanvas = document.getElementById('heartRateChart');
const contractionsCanvas = document.getElementById('contractionsChart');

// –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ö–ì–¢ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
const kgtHistoryData = [
    {
        id: 1,
        date: "15.12.2023",
        duration: "60 –º–∏–Ω—É—Ç",
        data: generateHistoricalKGTData(60) // 60 –º–∏–Ω—É—Ç –¥–∞–Ω–Ω—ã—Ö
    },
    {
        id: 2,
        date: "10.12.2023",
        duration: "45 –º–∏–Ω—É—Ç",
        data: generateHistoricalKGTData(45) // 45 –º–∏–Ω—É—Ç –¥–∞–Ω–Ω—ã—Ö
    },
    {
        id: 3,
        date: "05.12.2023",
        duration: "30 –º–∏–Ω—É—Ç",
        data: generateHistoricalKGTData(30) // 30 –º–∏–Ω—É—Ç –¥–∞–Ω–Ω—ã—Ö
    }
];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ö–ì–¢
function generateHistoricalKGTData(durationMinutes) {
    const data = [];
    const dataPoints = durationMinutes * 2; // –ü–æ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    for (let i = 0; i < dataPoints; i++) {
        // –ß–°–° –ø–ª–æ–¥–∞ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é
        let heartRate = 140 + Math.sin(i * 0.1) * 10 + Math.random() * 5 - 2.5;
        heartRate = Math.round(heartRate);

        // –ú–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let contractions = Math.max(0, Math.sin(i * 0.05) * 25 + Math.random() * 10);
        contractions = Math.round(contractions * 10) / 10;

        data.push({
            heartRate,
            contractions,
            timestamp: i * 30 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        });
    }

    return data;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
function setupCanvases() {
    const heartRateCanvas = document.getElementById('heartRateChart');
    const contractionsCanvas = document.getElementById('contractionsChart');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const heartRateContainer = heartRateCanvas.parentElement;
    const contractionsContainer = contractionsCanvas.parentElement;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas —Ä–∞–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    heartRateCanvas.width = heartRateContainer.clientWidth - 40; // –£—á–∏—Ç—ã–≤–∞–µ–º padding
    heartRateCanvas.height = heartRateContainer.clientHeight - 50; // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    contractionsCanvas.width = contractionsContainer.clientWidth - 40;
    contractionsCanvas.height = contractionsContainer.clientHeight - 50;
    
    console.log(`üìè –†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤: –ß–°–°=${heartRateCanvas.width}x${heartRateCanvas.height}, –°–æ–∫—Ä–∞—â–µ–Ω–∏—è=${contractionsCanvas.width}x${contractionsCanvas.height}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function initCharts() {
    setupCanvases();
    drawEmptyChart(heartRateCanvas, '–ß–°–° –ø–ª–æ–¥–∞');
    drawEmptyChart(contractionsCanvas, '–ú–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è');
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
function drawEmptyChart(canvas, title) {
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.clearRect(0, 0, width, height);

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
    ctx.strokeStyle = '#333333';
    ctx.lineWidth = 1;

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 0; i <= 5; i++) {
        const y = i * height / 5;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
    }

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–≤—Ä–µ–º—è)
    for (let i = 0; i <= 10; i++) {
        const x = i * width / 10;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
    }

    // –¢–µ–∫—Å—Ç "–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    ctx.fillStyle = '#888888';
    ctx.font = '16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', width / 2, height / 2);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
function drawChart(canvas, data, color, title) {
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.clearRect(0, 0, width, height);

    if (data.length < 2) {
        // –†–∏—Å—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        ctx.fillStyle = '#888888';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', width / 2, height / 2);
        return;
    }

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ - –±–æ–ª–µ–µ —Ç–æ–Ω–∫–∞—è –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è
    ctx.strokeStyle = '#444444';
    ctx.lineWidth = 0.5;
    ctx.setLineDash([]);

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 0; i <= 5; i++) {
        const y = i * height / 5;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
    }

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–≤—Ä–µ–º—è) - –±–æ–ª—å—à–µ –ª–∏–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    for (let i = 0; i <= 10; i++) {
        const x = i * width / 10;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
    }

    // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –ú–ê–°–®–¢–ê–ë –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    let yMin, yMax;
    if (title === '–ß–°–° –ø–ª–æ–¥–∞') {
        yMin = 80;   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        yMax = 200;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    } else {
        // –î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π 0-100
        yMin = 0;
        yMax = 100;
    }

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –±–æ–ª–µ–µ —Ç–æ–ª—Å—Ç–∞—è –∏ –ø–ª–∞–≤–Ω–∞—è –ª–∏–Ω–∏—è
    ctx.strokeStyle = color;
    ctx.lineWidth = 2.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –ª–∏–Ω–∏–∏
    ctx.lineJoin = 'round';
    ctx.lineCap = 'round';
    ctx.beginPath();

    const xStep = width / (maxDataPoints - 1);

    for (let i = 0; i < data.length; i++) {
        const x = i * xStep;
        
        // –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –∑–Ω–∞—á–µ–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –º–∞—Å—à—Ç–∞–±
        const clampedValue = Math.max(yMin, Math.min(yMax, data[i]));
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
        const y = height - ((clampedValue - yMin) / (yMax - yMin)) * height;

        if (i === 0) {
            ctx.moveTo(x, y);
        } else {
            ctx.lineTo(x, y);
        }
    }

    ctx.stroke();

    // –ü–æ–¥–ø–∏—Å–∏ –º–∞—Å—à—Ç–∞–±–∞ –¥–ª—è –ß–°–° - —É–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
    if (title === '–ß–°–° –ø–ª–æ–¥–∞') {
        ctx.fillStyle = '#cccccc';
        ctx.font = '12px Arial';
        ctx.textAlign = 'right';
        
        // –õ–µ–≤–∞—è —à–∫–∞–ª–∞ - –∑–Ω–∞—á–µ–Ω–∏—è –ß–°–°
        ctx.fillText(yMax.toString(), 35, 15);
        ctx.fillText(Math.round((yMax + yMin) / 2).toString(), 35, height / 2 + 5);
        ctx.fillText(yMin.toString(), 35, height - 5);
        
        // –î–æ–±–∞–≤–∏—Ç—å –∑–µ–ª–µ–Ω—É—é –∑–æ–Ω—É –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (110-160)
        const normalMinY = height - ((160 - yMin) / (yMax - yMin)) * height;
        const normalMaxY = height - ((110 - yMin) / (yMax - yMin)) * height;
        
        ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';
        ctx.fillRect(40, normalMinY, width - 50, normalMaxY - normalMinY);
        
        // –ü–æ–¥–ø–∏—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
        ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';
        ctx.font = '10px Arial';
        ctx.textAlign = 'left';
        ctx.fillText('–ù–æ—Ä–º–∞: 110-160 —É–¥/–º–∏–Ω', 45, normalMinY - 5);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    if (data.length > 0) {
        const currentValue = data[data.length - 1];
        ctx.fillStyle = color;
        ctx.font = 'bold 14px Arial';
        ctx.textAlign = 'right';
        ctx.fillText(`${Math.round(currentValue)}`, width - 10, 20);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
window.addEventListener('resize', function() {
    console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤');
    setupCanvases();
    
    if (isMonitoring || isKGTLoaded) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        setTimeout(() => {
            drawChart(heartRateCanvas, heartRateData, '#00ff00', '–ß–°–° –ø–ª–æ–¥–∞');
            drawChart(contractionsCanvas, contractionsData, '#ff0000', '–ú–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è');
        }, 100);
    } else {
        initCharts();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function updateAnalytics(predictionData) {
    if (!predictionData) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
    if (predictionData.trend) {
        currentTrend = predictionData.trend;
        document.getElementById('trendValue').textContent = 
            predictionData.trend.trend === 'rising' ? 'üìà –†–∞—Å—Ç–µ—Ç' :
            predictionData.trend.trend === 'falling' ? 'üìâ –ü–∞–¥–∞–µ—Ç' : '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ';
        
        document.getElementById('trendDirection').textContent = 
            predictionData.trend.trend === 'rising' ? '–†–æ—Å—Ç' :
            predictionData.trend.trend === 'falling' ? '–°–Ω–∏–∂–µ–Ω–∏–µ' : '–°—Ç–∞–±–∏–ª—å–Ω—ã–π';
        
        document.getElementById('trendDirection').className = 
            `trend-direction ${predictionData.trend.trend}`;
        
        document.getElementById('confidenceValue').textContent = 
            `${Math.round(predictionData.trend.confidence * 100)}%`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
    if (predictionData.risk) {
        currentRisk = predictionData.risk;
        const riskLevel = predictionData.risk.risk_level;
        
        document.getElementById('riskLevel').textContent = 
            riskLevel === 'high' ? '–í—ã—Å–æ–∫–∏–π' :
            riskLevel === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π';
        
        document.getElementById('riskLevel').className = 
            `analytics-value risk-level ${riskLevel}`;
        
        document.getElementById('riskScore').textContent = 
            predictionData.risk.score.toFixed(2);
        
        document.getElementById('riskFactors').textContent = 
            predictionData.risk.factors.length > 0 ? 
            predictionData.risk.factors.join(', ') : '–ù–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (predictionData.statistics) {
        currentStats = predictionData.statistics;
        document.getElementById('meanBPM').textContent = 
            predictionData.statistics.mean_bpm_1min ? 
            Math.round(predictionData.statistics.mean_bpm_1min) : '-';
        
        document.getElementById('medianBPM').textContent = 
            predictionData.statistics.median_bpm_1min ? 
            Math.round(predictionData.statistics.median_bpm_1min) : '-';
        
        document.getElementById('variability').textContent = 
            predictionData.risk ? 
            predictionData.risk.variability.toFixed(1) : '-';
    }
}

// –ù–∞—á–∞–ª–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ WebSocket
function startRealTimeMonitoring(sessionId = null) {
    if (isMonitoring) return;

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –ö–ì–¢, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (isKGTLoaded) {
        if (!confirm('–ó–∞–≥—Ä—É–∂–µ–Ω –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ö–ì–¢. –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            return;
        }
        closeLoadedKGT();
    }

    console.log('–ù–∞—á–∞–ª–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ WebSocket...');

    isMonitoring = true;
    currentSessionType = 'realtime';
    
    // –ï—Å–ª–∏ sessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é
    if (!sessionId) {
        sessionId = '1'; // –ó–∞–≥–ª—É—à–∫–∞ - –ø–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    currentSessionId = sessionId;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    sessionDataForReport = {
        heartRate: [],
        contractions: [],
        timestamps: [],
        startTime: new Date(),
        endTime: null,
        duration: 0,
        meta: null
    };

    document.getElementById('startBtn').disabled = true;
    document.getElementById('stopBtn').disabled = false;
    document.getElementById('loadKgtBtn').disabled = true;
    document.getElementById('saveBtn').disabled = false; // –í–ö–õ–Æ–ß–ê–ï–ú –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    heartRateData = [];
    contractionsData = [];
    monitoringTime = 0;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    updateTimer();

    // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞
    monitoringInterval = setInterval(() => {
        monitoringTime++;
        updateTimer();
    }, 1000);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    connectWebSocket(sessionId);

    document.getElementById('statusDisplay').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...';
    document.getElementById('statusDisplay').style.color = '#593e23';
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
function connectWebSocket(sessionId) {
    const sampleRate = 4.0;
    
    websocket = new WebSocket(`ws://localhost:8001/ws/stream/${sessionId}?sample_rate=${sampleRate}`);

    websocket.onopen = function(event) {
        console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        document.getElementById('statusDisplay').textContent = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞—Ç (—Ä–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)';
        document.getElementById('statusDisplay').style.color = '#593e23';
        
        // –ó–ê–ü–†–û–° –ú–ï–¢–†–ò–ö - –î–û–ë–ê–í–õ–ï–ù–û
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        fetch('/api/metrics/simple')
            .then(response => response.json())
            .then(metrics => {
                console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
            });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        setInterval(() => {
            fetch('/api/metrics/simple')
                .then(response => response.json())
                .then(metrics => {
                    console.log('üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
                });
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    };

    websocket.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        switch(data.type) {
            case 'meta':
                console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', data.meta);
                sessionDataForReport.meta = data.meta;
                break;
                
            case 'frame':
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                updateRealTimeData(data);
                break;
                
            case 'prediction':
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                updateAnalytics(data);
                break;
                
            case 'error':
                console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
                document.getElementById('statusDisplay').textContent = `–û—à–∏–±–∫–∞: ${data.message}`;
                document.getElementById('statusDisplay').style.color = '#ff0000';
                break;
                
            // –ú–û–ñ–ï–¢–ï –î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£ –ú–ï–¢–†–ò–ö –û–¢ –°–ï–†–í–ï–†–ê
            case 'metrics_update':
                console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.metrics);
                break;
        }
    };

    websocket.onclose = function(event) {
        console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        if (isMonitoring) {
            document.getElementById('statusDisplay').textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ';
            document.getElementById('statusDisplay').style.color = '#ff0000';
        }
        
        // –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ò–ù–¢–ï–†–í–ê–õ –ó–ê–ü–†–û–°–ê –ú–ï–¢–†–ò–ö –ü–†–ò –û–¢–ö–õ–Æ–ß–ï–ù–ò–ò
        clearInterval(metricsInterval);
    };

    websocket.onerror = function(error) {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        document.getElementById('statusDisplay').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
        document.getElementById('statusDisplay').style.color = '#ff0000';
    };
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ WebSocket
function updateRealTimeData(data) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (data.bpm !== null && data.bpm !== undefined) {
        document.getElementById('currentHeartRate').textContent = Math.round(data.bpm);
        heartRateData.push(data.bpm);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        sessionDataForReport.heartRate.push(data.bpm);
        sessionDataForReport.timestamps.push(data.time);
    }
    
    if (data.uterus !== null && data.uterus !== undefined) {
        document.getElementById('currentContractions').textContent = Math.round(data.uterus);
        contractionsData.push(data.uterus);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        sessionDataForReport.contractions.push(data.uterus);
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–æ –Ω–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞)
    if (heartRateData.length > maxDataPoints) {
        heartRateData.shift();
    }
    if (contractionsData.length > maxDataPoints) {
        contractionsData.shift();
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    drawChart(heartRateCanvas, heartRateData, '#00ff00', '–ß–°–° –ø–ª–æ–¥–∞');
    drawChart(contractionsCanvas, contractionsData, '#ff0000', '–ú–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    updateStatusFromRealTimeData(data);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function updateStatusFromRealTimeData(data) {
    const statusDisplay = document.getElementById('statusDisplay');
    const greenLight = document.getElementById('greenLight');
    const yellowLight = document.getElementById('yellowLight');

    // –°–±—Ä–æ—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    greenLight.classList.add('inactive');
    yellowLight.classList.add('inactive');

    if (data.bpm !== null && data.bpm !== undefined) {
        if (data.bpm < 110 || data.bpm > 160) {
            statusDisplay.textContent = `–û–ø–∞—Å–Ω–æ—Å—Ç—å: –ß–°–° –ø–ª–æ–¥–∞ ${Math.round(data.bpm)} —É–¥/–º–∏–Ω (–Ω–æ—Ä–º–∞ 110-160)`;
            statusDisplay.style.color = '#ff0000';
            yellowLight.classList.remove('inactive');
        } else if (data.uterus > 70) {
            statusDisplay.textContent = '–û–ø–∞—Å–Ω–æ—Å—Ç—å: –°–∏–ª—å–Ω—ã–µ –º–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è';
            statusDisplay.style.color = '#ff0000';
            yellowLight.classList.remove('inactive');
        } else {
            statusDisplay.textContent = '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ';
            statusDisplay.style.color = '#593e23';
            greenLight.classList.remove('inactive');
        }
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function stopMonitoring() {
    if (!isMonitoring && !isKGTLoaded) return;

    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    if (isMonitoring && sessionDataForReport) {
        sessionDataForReport.endTime = new Date();
        sessionDataForReport.duration = monitoringTime;
        console.log('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞:', {
            heartRatePoints: sessionDataForReport.heartRate.length,
            contractionPoints: sessionDataForReport.contractions.length,
            duration: sessionDataForReport.duration
        });
    }

    if (isMonitoring) {
        isMonitoring = false;
        clearInterval(monitoringInterval);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (websocket) {
            websocket.close();
            websocket = null;
        }
    }

    if (isKGTLoaded) {
        // –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –æ—á–∏—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        document.getElementById('stopBtn').disabled = true;
        document.getElementById('loadKgtBtn').disabled = false;
    }

    document.getElementById('startBtn').disabled = false;
    document.getElementById('stopBtn').disabled = true;
    document.getElementById('loadKgtBtn').disabled = false;
    document.getElementById('saveBtn').disabled = false;

    document.getElementById('statusDisplay').textContent = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞.';
    document.getElementById('statusDisplay').style.color = '#593e23';

    // –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    document.getElementById('greenLight').classList.add('inactive');
    document.getElementById('yellowLight').classList.add('inactive');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
    const minutes = Math.floor(monitoringTime / 60);
    const seconds = monitoringTime % 60;
    document.getElementById('timer').textContent =
        `–í—Ä–µ–º—è: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function saveResults() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        if (sessionDataForReport.heartRate.length === 0 && (!currentSessionId || !isKGTLoaded)) {
            alert('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ö–ì–¢ –¥–∞–Ω–Ω—ã–µ.');
            return;
        }

        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...', {
            sessionId: currentSessionId,
            sessionType: currentSessionType,
            dataPoints: sessionDataForReport.heartRate.length
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const doctorNotes = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Ä–∞—á–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', '');
        const diagnosis = prompt('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', '');

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const reportData = {
            session_data: {
                session_id: currentSessionId || `local_${Date.now()}`,
                session_type: currentSessionType || 'local',
                start_time: sessionDataForReport.startTime,
                end_time: sessionDataForReport.endTime || new Date(),
                duration: sessionDataForReport.duration || monitoringTime,
                data_points: sessionDataForReport.heartRate.length
            },
            analysis_data: generateAnalysisFromSessionData(),
            patient_info: {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                age: 30,
                gestation_weeks: 32,
                diagnosis: diagnosis || '–ù–µ —É–∫–∞–∑–∞–Ω',
                doctor_notes: doctorNotes || ''
            }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        const response = await fetch('/api/generate-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(reportData)
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        }

        // –ü–æ–ª—É—á–∞–µ–º PDF —Ñ–∞–π–ª
        const blob = await response.blob();
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const sessionId = currentSessionId || 'local';
        a.download = `kgt_report_${sessionId}_${timestamp}.pdf`;
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        
        showNotification('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —Å–∫–∞—á–∞–Ω', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
        
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if (error.message.includes('—Å–µ—Ä–≤–µ—Ä–µ') || error.message.includes('fetch')) {
            createLocalReport();
        } else {
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: ' + error.message, 'error');
        }
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
function generateAnalysisFromSessionData() {
    if (sessionDataForReport.heartRate.length === 0) {
        return {
            features: {
                duration_seconds: 0,
                total_samples: 0,
                bpm_samples: 0,
                mean_bpm: 0,
                median_bpm: 0,
                max_bpm: 0,
                min_bpm: 0,
                std_bpm: 0,
                decel_count: 0,
                tachy_count: 0,
                brady_count: 0
            }
        };
    }

    const heartRate = sessionDataForReport.heartRate;
    const meanBPM = heartRate.reduce((a, b) => a + b, 0) / heartRate.length;
    const maxBPM = Math.max(...heartRate);
    const minBPM = Math.min(...heartRate);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    const squaredDiffs = heartRate.map(value => Math.pow(value - meanBPM, 2));
    const avgSquaredDiff = squaredDiffs.reduce((a, b) => a + b, 0) / heartRate.length;
    const stdBPM = Math.sqrt(avgSquaredDiff);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    const tachyCount = heartRate.filter(bpm => bpm > 160).length;
    const bradyCount = heartRate.filter(bpm => bpm < 110).length;

    return {
        features: {
            duration_seconds: sessionDataForReport.duration,
            total_samples: heartRate.length,
            bpm_samples: heartRate.length,
            mean_bpm: Math.round(meanBPM * 10) / 10,
            median_bpm: Math.round(heartRate.sort((a, b) => a - b)[Math.floor(heartRate.length / 2)] * 10) / 10,
            max_bpm: Math.round(maxBPM),
            min_bpm: Math.round(minBPM),
            std_bpm: Math.round(stdBPM * 10) / 10,
            decel_count: 0, // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            tachy_count: tachyCount,
            brady_count: bradyCount
        }
    };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
function createLocalReport() {
    try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        const analysis = generateAnalysisFromSessionData();
        const reportText = `
–û–¢–ß–ï–¢ –ü–û –°–ï–°–°–ò–ò –ö–ì–¢

–î–∞—Ç–∞: ${new Date().toLocaleString()}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(sessionDataForReport.duration / 60)} –º–∏–Ω—É—Ç
–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: ${sessionDataForReport.heartRate.length}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–°–°:
- –°—Ä–µ–¥–Ω–µ–µ: ${analysis.features.mean_bpm} —É–¥/–º–∏–Ω
- –ú–∞–∫—Å–∏–º—É–º: ${analysis.features.max_bpm} —É–¥/–º–∏–Ω
- –ú–∏–Ω–∏–º—É–º: ${analysis.features.min_bpm} —É–¥/–º–∏–Ω
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${analysis.features.std_bpm}

–°–û–ë–´–¢–ò–Ø:
- –¢–∞—Ö–∏–∫–∞—Ä–¥–∏—è: ${analysis.features.tachy_count} —ç–ø–∏–∑–æ–¥–æ–≤
- –ë—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è: ${analysis.features.brady_count} —ç–ø–∏–∑–æ–¥–æ–≤

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
${generateConclusion(analysis.features)}
        `;

        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        const blob = new Blob([reportText], { type: 'text/plain;charset=utf-8' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `kgt_report_${currentSessionId || 'local'}_${Date.now()}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);

        showNotification('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
        showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', 'error');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è
function generateConclusion(features) {
    const conclusions = [];
    
    if (features.mean_bpm > 160) {
        conclusions.push("–û—Ç–º–µ—á–∞–µ—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–∞—è —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è.");
    } else if (features.mean_bpm < 110) {
        conclusions.push("–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è.");
    } else {
        conclusions.push("–ë–∞–∑–∞–ª—å–Ω—ã–π —Ä–∏—Ç–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.");
    }
    
    if (features.std_bpm < 5) {
        conclusions.push("–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ —Å–Ω–∏–∂–µ–Ω–∞.");
    } else if (features.std_bpm > 15) {
        conclusions.push("–í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ –ø–æ–≤—ã—à–µ–Ω–∞.");
    }
    
    if (features.tachy_count > 5) {
        conclusions.push("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏–∏.");
    }
    
    if (features.brady_count > 0) {
        conclusions.push("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —ç–ø–∏–∑–æ–¥—ã –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏–∏.");
    }
    
    if (conclusions.length === 0) {
        conclusions.push("–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ. –ö–∞—Ä–¥–∏–æ—Ç–æ–∫–æ–≥—Ä–∞–º–º–∞ –≤ –Ω–æ—Ä–º–µ.");
    }
    
    return conclusions.join(' ');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ö–ì–¢ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function loadKgtHistory() {
    const historyList = document.getElementById('kgtHistoryList');

    if (kgtHistoryData.length === 0) {
        historyList.innerHTML = '<div class="kgt-history-empty">–ò—Å—Ç–æ—Ä–∏—è –ö–ì–¢ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
        return;
    }

    historyList.innerHTML = '';

    kgtHistoryData.forEach(kgtRecord => {
        const historyItem = document.createElement('div');
        historyItem.className = 'kgt-history-item';
        historyItem.innerHTML = `
            <div class="kgt-history-date">${kgtRecord.date}</div>
            <div class="kgt-history-duration">${kgtRecord.duration}</div>
        `;

        historyItem.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('.kgt-history-item').forEach(item => {
                item.classList.remove('active');
            });
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            historyItem.classList.add('active');

            loadKGTData(kgtRecord);
        });

        historyList.appendChild(historyItem);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ö–ì–¢ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
function loadKGTData(kgtRecord) {
    if (isMonitoring) {
        if (!confirm('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ? –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            return;
        }
        stopMonitoring();
    }

    loadedKGTData = kgtRecord.data;
    isKGTLoaded = true;
    currentPlaybackIndex = 0;
    isPlaybackPaused = false;
    currentSessionType = 'historical';
    currentSessionId = `historical_${kgtRecord.id}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    sessionDataForReport = {
        heartRate: [],
        contractions: [],
        timestamps: [],
        startTime: new Date(),
        endTime: null,
        duration: kgtRecord.duration,
        meta: {
            patient_name: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
            session_duration: kgtRecord.duration,
            source: "historical"
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –ö–ì–¢
    document.getElementById('loadedKgtInfo').textContent =
        `${kgtRecord.date} ‚Ä¢ ${kgtRecord.duration}`;
    document.getElementById('kgtInfoBar').style.display = 'flex';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    heartRateData = [];
    contractionsData = [];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    document.getElementById('startBtn').disabled = true;
    document.getElementById('stopBtn').disabled = false;
    document.getElementById('loadKgtBtn').disabled = true;
    document.getElementById('saveBtn').disabled = false; // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    startKGTPlayback();
}

// –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ö–ì–¢
function startKGTPlayback() {
    if (!loadedKGTData || loadedKGTData.length === 0) return;

    monitoringTime = 0;
    updateTimer();

    document.getElementById('statusDisplay').textContent = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ö–ì–¢...';
    document.getElementById('statusDisplay').style.color = '#593e23';

    kgtPlaybackInterval = setInterval(() => {
        if (isPlaybackPaused) return;

        if (currentPlaybackIndex < loadedKGTData.length) {
            const dataPoint = loadedKGTData[currentPlaybackIndex];
            updateDataFromPlayback(dataPoint);
            currentPlaybackIndex++;
            monitoringTime = Math.floor(currentPlaybackIndex * 0.5); // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–æ—á–∫—É
            updateTimer();
        } else {
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            stopKGTPlayback();
            sessionDataForReport.endTime = new Date();
            document.getElementById('statusDisplay').textContent = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞.';
            document.getElementById('statusDisplay').style.color = '#593e23';
        }
    }, 500); // –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ 30
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function updateDataFromPlayback(dataPoint) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    document.getElementById('currentHeartRate').textContent = dataPoint.heartRate;
    document.getElementById('currentContractions').textContent = dataPoint.contractions.toFixed(1);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    heartRateData.push(dataPoint.heartRate);
    contractionsData.push(dataPoint.contractions);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    sessionDataForReport.heartRate.push(dataPoint.heartRate);
    sessionDataForReport.contractions.push(dataPoint.contractions);
    sessionDataForReport.timestamps.push(dataPoint.timestamp);

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (heartRateData.length > maxDataPoints) {
        heartRateData.shift();
    }
    if (contractionsData.length > maxDataPoints) {
        contractionsData.shift();
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    drawChart(heartRateCanvas, heartRateData, '#00ff00', '–ß–°–° –ø–ª–æ–¥–∞');
    drawChart(contractionsCanvas, contractionsData, '#ff0000', '–ú–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Ç–æ—á–µ–∫ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏)
    if (currentPlaybackIndex % 10 === 0) {
        updateStatusFromRealTimeData({
            bpm: dataPoint.heartRate,
            uterus: dataPoint.contractions
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –º–∞—Ç–µ—Ä–∏
    updateMotherVitals();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
    if (currentPlaybackIndex % 20 === 0) {
        generateMockAnalytics(dataPoint);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function generateMockAnalytics(dataPoint) {
    const mockPrediction = {
        trend: {
            trend: Math.random() > 0.7 ? 'rising' : Math.random() > 0.5 ? 'falling' : 'stable',
            confidence: 0.7 + Math.random() * 0.3,
            slope: (Math.random() - 0.5) * 0.1
        },
        risk: {
            risk_level: Math.random() > 0.8 ? 'high' : Math.random() > 0.5 ? 'medium' : 'low',
            score: Math.random() * 0.8,
            factors: Math.random() > 0.7 ? ['tachycardia'] : Math.random() > 0.5 ? ['high_variability'] : [],
            variability: 5 + Math.random() * 10
        },
        statistics: {
            mean_bpm_1min: dataPoint.heartRate + (Math.random() - 0.5) * 5,
            median_bpm_1min: dataPoint.heartRate + (Math.random() - 0.5) * 3
        }
    };
    
    updateAnalytics(mockPrediction);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –º–∞—Ç–µ—Ä–∏ (—Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
function updateMotherVitals() {
    const pulse = 70 + Math.random() * 20 - 10;
    const spO2 = 96 + Math.random() * 3;
    const bpSystolic = 110 + Math.random() * 20 - 10;
    const bpDiastolic = 70 + Math.random() * 10 - 5;
    const temp = 36.6 + Math.random() * 0.8 - 0.4;

    document.getElementById('motherPulse').textContent = Math.round(pulse);
    document.getElementById('motherSpO2').textContent = Math.round(spO2);
    document.getElementById('motherBP').textContent =
        `${Math.round(bpSystolic)}/${Math.round(bpDiastolic)}`;
    document.getElementById('motherTemp').textContent = temp.toFixed(1);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ö–ì–¢
function stopKGTPlayback() {
    if (kgtPlaybackInterval) {
        clearInterval(kgtPlaybackInterval);
        kgtPlaybackInterval = null;
    }

    document.getElementById('stopBtn').disabled = true;
    document.getElementById('loadKgtBtn').disabled = false;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ö–ì–¢
function closeLoadedKGT() {
    if (isMonitoring) {
        stopMonitoring();
    }

    isKGTLoaded = false;
    loadedKGTData = null;
    currentPlaybackIndex = 0;
    currentSessionId = null;
    currentSessionType = null;

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
    sessionDataForReport = {
        heartRate: [],
        contractions: [],
        timestamps: [],
        startTime: null,
        endTime: null,
        duration: 0,
        meta: null
    };

    document.getElementById('kgtInfoBar').style.display = 'none';
    document.getElementById('startBtn').disabled = false;
    document.getElementById('stopBtn').disabled = true;
    document.getElementById('saveBtn').disabled = true;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
    document.querySelectorAll('.kgt-history-item').forEach(item => {
        item.classList.remove('active');
    });

    // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    heartRateData = [];
    contractionsData = [];
    initCharts();

    // –û—á–∏—â–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    clearAnalytics();

    document.getElementById('statusDisplay').textContent = '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ö–ì–¢ –∑–∞–∫—Ä—ã—Ç';
    document.getElementById('statusDisplay').style.color = '#593e23';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('currentHeartRate').textContent = '0';
    document.getElementById('currentContractions').textContent = '0';
    document.getElementById('motherPulse').textContent = '0';
    document.getElementById('motherSpO2').textContent = '0';
    document.getElementById('motherBP').textContent = '0/0';
    document.getElementById('motherTemp').textContent = '0.0';
}

// –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function clearAnalytics() {
    document.getElementById('trendValue').textContent = '-';
    document.getElementById('trendDirection').textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    document.getElementById('trendDirection').className = 'trend-direction';
    document.getElementById('confidenceValue').textContent = '0%';
    
    document.getElementById('riskLevel').textContent = '-';
    document.getElementById('riskLevel').className = 'analytics-value risk-level';
    document.getElementById('riskScore').textContent = '0.0';
    document.getElementById('riskFactors').textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    document.getElementById('meanBPM').textContent = '-';
    document.getElementById('medianBPM').textContent = '-';
    document.getElementById('variability').textContent = '-';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        z-index: 1000;
        max-width: 400px;
        word-wrap: break-word;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    `;
    
    switch(type) {
        case 'success':
            notification.style.backgroundColor = '#4CAF50';
            break;
        case 'error':
            notification.style.backgroundColor = '#f44336';
            break;
        case 'info':
            notification.style.backgroundColor = '#2196F3';
            break;
        default:
            notification.style.backgroundColor = '#593e23';
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
    initCharts();
    loadKgtHistory(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ö–ì–¢
    clearAnalytics(); // –û—á–∏—â–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', function() {
        console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞');
        if (isMonitoring || isKGTLoaded) {
            drawChart(heartRateCanvas, heartRateData, '#00ff00', '–ß–°–° –ø–ª–æ–¥–∞');
            drawChart(contractionsCanvas, contractionsData, '#ff0000', '–ú–∞—Ç–æ—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è');
        } else {
            initCharts();
        }
    });

    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ç–æ–≤—ã');
});

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
function goBack() {
    if (isMonitoring || isKGTLoaded) {
        if (confirm((isMonitoring ? '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω. ' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ö–ì–¢ –∞–∫—Ç–∏–≤–µ–Ω. ') + '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            stopMonitoring();
            if (isKGTLoaded) {
                closeLoadedKGT();
            }
            window.location.href = '../templates/cards.html';
        }
    } else {
        window.location.href = '../templates/cards.html';
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
function logout() {
    if (isMonitoring || isKGTLoaded) {
        if (confirm((isMonitoring ? '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. ' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ö–ì–¢ –∞–∫—Ç–∏–≤–µ–Ω. ') + '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            stopMonitoring();
            if (isKGTLoaded) {
                closeLoadedKGT();
            }
            window.location.href = '../templates/authorization.html';
        }
    } else {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
            window.location.href = '../templates/authorization.html';
        }
    }
}

function loadKGTFromDB() {
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.zip,.csv';
    fileInput.style.display = 'none';
    
    fileInput.onchange = function(event) {
        const file = event.target.files[0];
        if (file) {
            uploadKGTFile(file);
        }
    };
    
    document.body.appendChild(fileInput);
    fileInput.click();
    document.body.removeChild(fileInput);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ö–ì–¢ —Ñ–∞–π–ª–∞
async function uploadKGTFile(file) {
    try {
        showNotification('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...', 'info');
        
        const formData = new FormData();
        formData.append('file', file);
        formData.append('patient_name', '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—Ä–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
        formData.append('session_duration', '30 –º–∏–Ω—É—Ç');

        let endpoint = '/api/upload-kgt';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        if (file.name.toLowerCase().endsWith('.zip')) {
            endpoint = '/api/upload-kgt-zip';
        }

        const response = await fetch(endpoint, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        
        if (result.status === 'success') {
            showNotification('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
            console.log('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', result);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            startUploadedSessionMonitoring(result.session_id, result);
        } else {
            throw new Error(result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        showNotification(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
    }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
function startUploadedSessionMonitoring(sessionId, sessionInfo) {
    if (isMonitoring) {
        if (!confirm('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ö–ì–¢? –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            return;
        }
        stopMonitoring();
    }

    console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏:', sessionId);

    isKGTLoaded = true;
    currentSessionId = sessionId;
    currentSessionType = 'uploaded';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    sessionDataForReport = {
        heartRate: [],
        contractions: [],
        timestamps: [],
        startTime: new Date(),
        endTime: null,
        duration: 0,
        meta: {
            patient_name: sessionInfo.patient_name || '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç',
            session_duration: sessionInfo.duration_seconds ? 
                `${Math.round(sessionInfo.duration_seconds / 60)} –º–∏–Ω—É—Ç` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            source: "file_upload",
            original_filename: sessionInfo.original_filename
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –ö–ì–¢
    document.getElementById('loadedKgtInfo').textContent = 
        `${sessionInfo.patient_name} ‚Ä¢ ${sessionInfo.data_points} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö`;
    document.getElementById('kgtInfoBar').style.display = 'flex';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    heartRateData = [];
    contractionsData = [];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    document.getElementById('startBtn').disabled = true;
    document.getElementById('stopBtn').disabled = false;
    document.getElementById('loadKgtBtn').disabled = true;
    document.getElementById('saveBtn').disabled = false;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    connectUploadedSessionWebSocket(sessionId);
}

// WebSocket –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
function connectUploadedSessionWebSocket(sessionId) {
    const sampleRate = 4.0;
    
    websocket = new WebSocket(`ws://localhost:8001/ws/stream/uploaded/${sessionId}?sample_rate=${sampleRate}`);

    websocket.onopen = function(event) {
        console.log('WebSocket –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        document.getElementById('statusDisplay').textContent = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ö–ì–¢';
        document.getElementById('statusDisplay').style.color = '#593e23';
        isMonitoring = true;
        
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        monitoringTime = 0;
        updateTimer();
        monitoringInterval = setInterval(() => {
            monitoringTime++;
            updateTimer();
        }, 1000);
    };

    websocket.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        switch(data.type) {
            case 'meta':
                console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏:', data.meta);
                if (data.meta && sessionDataForReport) {
                    sessionDataForReport.meta = data.meta;
                }
                break;
                
            case 'frame':
                updateRealTimeData(data);
                break;
                
            case 'prediction':
                updateAnalytics(data);
                break;
                
            case 'error':
                console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
                document.getElementById('statusDisplay').textContent = `–û—à–∏–±–∫–∞: ${data.message}`;
                document.getElementById('statusDisplay').style.color = '#ff0000';
                break;
        }
    };

    websocket.onclose = function(event) {
        console.log('WebSocket –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
        if (isMonitoring) {
            stopMonitoring();
            document.getElementById('statusDisplay').textContent = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ';
            document.getElementById('statusDisplay').style.color = '#593e23';
        }
    };

    websocket.onerror = function(error) {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        document.getElementById('statusDisplay').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
        document.getElementById('statusDisplay').style.color = '#ff0000';
    };
}